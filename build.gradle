// old-style plugins that are not registered at plugins.gradle.org:
buildscript {
  repositories {
    mavenCentral()
    //Needed only for SNAPSHOT versions
    //maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
  }
}

// new-style plugins that ARE registered at plugins.gradle.org:
plugins {
  id 'java-library'
  id 'signing'
  id 'com.palantir.git-version' version '0.12.2'
  id 'io.codearte.nexus-staging' version '0.30.0'
  id 'maven-publish'
  id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.github.dtreskunov'

def setVersion() {
  def fromGit = gitVersion() // https://github.com/palantir/gradle-git-version
  def matcher = (fromGit =~ /^(\d+\.\d+\.\d+)(.*)$/)
  if (matcher.find()) {
    def tag = matcher.group(1)
    def isSnapshot = !matcher.group(2).isEmpty()
    if (isSnapshot) {
      version "${tag}-SNAPSHOT"
    } else {
      version tag
    }
  } else {
    version fromGit
  }
}
setVersion()
println "Project version: ${version}"

ext {
  isSnapshotVersion = version.endsWith('SNAPSHOT')
  nexusUsername = project.findProperty('nexusUsername') ?: 'secured'
  nexusPassword = project.findProperty('nexusPassword') ?: 'secured'
  servletContainer = project.getProperties().getOrDefault('servletContainer', 'tomcat')
  isFips = project.getProperties().getOrDefault('fips', 'true').toBoolean()
}

java {
  sourceCompatibility = 17
  targetCompatibility = 17
}

repositories {
  mavenCentral()
}

// https://www.baeldung.com/spring-boot-override-dependency-versions
dependencyManagement {
  imports {
    mavenBom 'org.springframework.boot:spring-boot-dependencies:3.5.0'
    mavenBom 'com.amazonaws:aws-java-sdk-bom:1.12.786'
  }
}

dependencies {
  api('org.springframework.boot:spring-boot')
  api('org.springframework.boot:spring-boot-autoconfigure')
  api('org.springframework:spring-web')
  api('org.slf4j:slf4j-api')
  api('jakarta.validation:jakarta.validation-api')
  api('jakarta.servlet:jakarta.servlet-api')
  api('com.amazonaws:aws-java-sdk-secretsmanager')
  api(isFips ? 'org.bouncycastle:bcpkix-fips' : 'org.bouncycastle:bcpkix-jdk15on')
  compileOnly('org.eclipse.jetty:jetty-server') // needed for jetty-specific customizations
  compileOnly('org.apache.tomcat.embed:tomcat-embed-core') // needed for tomcat-specific customizations
  compileOnly('io.undertow:undertow-core') // needed for undertow-specific customizations
  compileOnly('com.amazonaws:aws-java-sdk-secretsmanager') // needed for AWS Secrets Manager support
  runtimeOnly('org.springframework.boot:spring-boot-starter-validation')
  testRuntimeOnly('org.springframework.boot:spring-boot-starter-web') {
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
  }
  testRuntimeOnly('org.springframework.boot:spring-boot-starter-' + servletContainer)
  testImplementation('org.springframework.boot:spring-boot-starter-security')
  testImplementation('org.springframework.boot:spring-boot-starter-test')
  testImplementation('org.springframework.security:spring-security-test')
  testImplementation('org.apache.httpcomponents.client5:httpclient5')
  testImplementation('org.junit-pioneer:junit-pioneer')
  testImplementation('com.amazonaws:aws-java-sdk-secretsmanager') // needed for AWS Secrets Manager support
}

task generateTestCerts(type: Exec) {
  def dir = new File(project.rootDir, "src/test/resources/ssl")
  doFirst {
    dir.mkdirs()
  }
  workingDir dir
  commandLine 'ruby', '../../gen.rb'
}

test {
  useJUnitPlatform()
  dependsOn generateTestCerts
  testLogging {
    showStandardStreams = true
  }
  // https://junit-pioneer.org/docs/environment-variables/#warnings-for-reflective-access
  jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED', '--add-opens=java.base/java.util=ALL-UNNAMED'
}

//disable javadoc doclint for Java8
if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

task sourcesJar(type: Jar) {
  from sourceSets.main.allJava
  archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
  from javadoc
  archiveClassifier = 'javadoc'
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar

      pom {
        name = 'EasySSL for Spring Boot microservices'
        description = 'EasySSL is a small library to help create Spring Boot microservices that talk to each other over HTTPS with mutual authentication'
        url = 'https://github.com/dtreskunov/easyssl'

        scm {
          url = 'scm:git@github.com:dtreskunov/easyssl.git'
          connection = 'scm:git@github.com:dtreskunov/easyssl.git'
          developerConnection = 'scm:git@github.com:dtreskunov/easyssl.git'
        }

        licenses {
          license {
            name = 'The Apache Software License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution = 'repo'
          }
        }

        developers {
          developer {
            id = 'dtreskunov'
            name = 'Denis Treskunov'
          }
        }
      }
    }
  }
  
  repositories {
    maven {
      def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
      def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
      url = isSnapshotVersion ? snapshotsRepoUrl : releasesRepoUrl
      credentials {
        username nexusUsername
        password nexusPassword
      }
    }
  }
}

signing {
  if (project.hasProperty('signing.keyId') || !isSnapshotVersion) {
    sign publishing.publications
  }
}

nexusStaging {
  packageGroup = group
  numberOfRetries = 20
  delayBetweenRetriesInMillis = 10000
  username = nexusUsername
  password = nexusPassword
}

dependencyLocking {
  lockAllConfigurations()
  lockMode = LockMode.STRICT
  lockFile = new File(projectDir, (isFips ? 'fips' : 'nonfips') + '.' + servletContainer + '.lockfile')
}

task closeAndReleaseRepositoryIfNeeded(dependsOn: closeAndReleaseRepository) {
  if (isSnapshotVersion) {
    enabled = false
    dependsOn = []
  }
}

task myPublish {
  dependsOn publish, closeAndReleaseRepositoryIfNeeded
  closeAndReleaseRepositoryIfNeeded.mustRunAfter publish
}
