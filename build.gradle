// old-style plugins that are not registered at plugins.gradle.org:
buildscript {
  repositories {
    mavenCentral()
    //Needed only for SNAPSHOT versions
    //maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
  }
}

// new-style plugins that ARE registered at plugins.gradle.org:
plugins {
  id 'java'
  id 'signing'
  id 'org.springframework.boot' version '1.5.20.RELEASE'
  id 'com.palantir.git-version' version '0.11.0'
  id 'io.codearte.nexus-staging' version '0.20.0'
  id 'de.marcphilipp.nexus-publish' version '0.2.0'
}

group = 'com.github.dtreskunov'

def setVersion() {
  def fromGit = gitVersion() // https://github.com/palantir/gradle-git-version
  def matcher = (fromGit =~ /^(\d+\.\d+\.\d+)(.*)$/)
  if (matcher.find()) {
    def tag = matcher.group(1)
    def isSnapshot = !matcher.group(2).isEmpty()
    if (isSnapshot) {
      version "${tag}-SNAPSHOT"
    } else {
      version tag
    }
  } else {
    version fromGit
  }
}
setVersion()
println "Project version: ${version}"

ext {
  isSnapshotVersion = version.endsWith('SNAPSHOT')
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
}

dependencies {
  compile('org.springframework.boot:spring-boot')
  compile('org.springframework.boot:spring-boot-autoconfigure')
  compile('org.springframework:spring-web')
  compile('org.slf4j:slf4j-api')
  compile('org.apache.httpcomponents:httpcore')
  compile('javax.validation:validation-api:1.1.0.Final')
  compile('javax.servlet:javax.servlet-api')
  compile('org.bouncycastle:bcpkix-jdk15on:1.61')
  testCompile('org.springframework.boot:spring-boot-starter-web') {
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
  }
  testCompile('org.springframework.boot:spring-boot-starter-jetty')
  testCompile('org.springframework.boot:spring-boot-starter-security')
  testCompile('junit:junit')
  testCompile('org.springframework.boot:spring-boot-starter-test')
  testCompile('org.springframework.security:spring-security-test')
  testCompile('org.apache.httpcomponents:httpclient')
  testCompile('com.github.stefanbirkner:system-rules:1.19.0')
}

configurations.all {
  resolutionStrategy.eachDependency { DependencyResolveDetails details ->
    if (details.requested.group.startsWith('org.eclipse.jetty')) {
        details.useVersion '9.4.14.v20181114'
    }
  }
}  


bootRepackage {
  enabled = false
}

task generateTestCerts(type: Exec) {
  def dir = new File(project.rootDir, "src/test/resources/ssl")
  doFirst {
    dir.mkdirs()
  }
  workingDir dir
  commandLine 'ruby', '../../gen.rb'
}

test {
  dependsOn generateTestCerts
}

//disable javadoc doclint for Java8
if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

task sourcesJar(type: Jar) {
  from sourceSets.main.allJava
  archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
  from javadoc
  archiveClassifier = 'javadoc'
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar

      pom {
        name = 'EasySSL for Spring Boot microservices'
        description = 'EasySSL is a small library to help create Spring Boot microservices that talk to each other over HTTPS with mutual authentication'
        url = 'https://github.com/dtreskunov/easyssl'

        scm {
          url = 'scm:git@github.com:dtreskunov/easyssl.git'
          connection = 'scm:git@github.com:dtreskunov/easyssl.git'
          developerConnection = 'scm:git@github.com:dtreskunov/easyssl.git'
        }

        licenses {
          license {
            name = 'The Apache Software License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution = 'repo'
          }
        }

        developers {
          developer {
            id = 'dtreskunov'
            name = 'Denis Treskunov'
          }
        }
      }
    }
  }
  repositories {
    maven {
      def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
      def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
      url = isSnapshotVersion ? snapshotsRepoUrl : releasesRepoUrl
      credentials {
        username project.findProperty('nexusUsername') ?: 'secured'
        password project.findProperty('nexusPassword') ?: 'secured'
      }
    }
  }
}

signing {
  if (project.hasProperty('signing.keyId') || !isSnapshotVersion) {
    sign publishing.publications
  }
}

nexusStaging {
  packageGroup = group
  numberOfRetries = 20
  delayBetweenRetriesInMillis = 3000
}

nexusPublishing {
  packageGroup = rootProject.nexusStaging.packageGroup
  stagingProfileId = rootProject.nexusStaging.stagingProfileId
  username = project.findProperty('nexusUsername') ?: 'secured'
  password = project.findProperty('nexusPassword') ?: 'secured'
}

task closeAndReleaseRepositoryIfNeeded(dependsOn: closeAndReleaseRepository) {
  if (isSnapshotVersion) {
    enabled = false
    dependsOn = []
  }
}

task myPublish {
  dependsOn publishToNexus, closeAndReleaseRepositoryIfNeeded
  closeAndReleaseRepositoryIfNeeded.mustRunAfter publishToNexus
}
