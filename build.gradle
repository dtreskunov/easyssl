// old-style plugins that are not registered at plugins.gradle.org:
buildscript {
  repositories {
    mavenCentral()
    //Needed only for SNAPSHOT versions
    //maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
  }
}

// new-style plugins that ARE registered at plugins.gradle.org:
plugins {
  id 'java'
  id 'signing'
  id 'org.springframework.boot' version '1.5.20.RELEASE'
  id 'com.palantir.git-version' version '0.11.0'
  id 'io.codearte.nexus-staging' version '0.20.0'
  id 'de.marcphilipp.nexus-publish' version '0.2.0'
}

group = 'com.github.dtreskunov'

def setVersion() {
  def fromGit = gitVersion() // https://github.com/palantir/gradle-git-version
  def matcher = (fromGit =~ /^(\d+\.\d+\.\d+)(.*)$/)
  if (matcher.find()) {
    def tag = matcher.group(1)
    def isSnapshot = !matcher.group(2).isEmpty()
    if (isSnapshot) {
      version "${tag}-SNAPSHOT"
    } else {
      version tag
    }
  } else {
    version fromGit
  }
}
setVersion()
println "Project version: ${version}"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
}

dependencies {
  compile('org.springframework.boot:spring-boot')
  compile('org.springframework.boot:spring-boot-autoconfigure')
  compile('org.springframework:spring-web')
  compile('org.slf4j:slf4j-api')
  compile('org.apache.httpcomponents:httpcore')
  compile('javax.validation:validation-api:1.1.0.Final')
  compile('javax.servlet:javax.servlet-api')
  compile('org.bouncycastle:bcpkix-jdk15on:1.61')
  testCompile('org.springframework.boot:spring-boot-starter-web')
  testCompile('org.springframework.boot:spring-boot-starter-security')
  testCompile('junit:junit')
  testCompile('org.springframework.boot:spring-boot-starter-test')
  testCompile('org.springframework.security:spring-security-test')
  testCompile('org.apache.httpcomponents:httpclient')
}

bootRepackage {
  enabled = false
}

task generateTestCerts(type: Exec) {
  def dir = new File(project.rootDir, "src/test/resources/ssl")
  doFirst {
    dir.mkdirs()
  }
  workingDir dir
  commandLine 'ruby', '../../gen.rb'
}

test {
  dependsOn generateTestCerts
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives javadocJar
  archives sourcesJar
}

signing {
  sign configurations.archives
}

publishing {
  publications {
    mavenJava(MavenPublication) {

      pom {
        name = 'EasySSL for Spring Boot microservices'
        description = 'EasySSL is a small library to help create Spring Boot microservices that talk to each other over HTTPS with mutual authentication'
        url = 'https://github.com/dtreskunov/easyssl'

        scm {
          url = 'scm:git@github.com:dtreskunov/easyssl.git'
          connection = 'scm:git@github.com:dtreskunov/easyssl.git'
          developerConnection = 'scm:git@github.com:dtreskunov/easyssl.git'
        }

        licenses {
          license {
            name = 'The Apache Software License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution = 'repo'
          }
        }

        developers {
          developer {
            id = 'dtreskunov'
            name = 'Denis Treskunov'
          }
        }
      }

      // create the sign pom artifact
      pom.withXml {
        def pomFile = file("${project.buildDir}/generated-pom.xml")
        writeTo(pomFile)
        def pomAscFile = signing.sign(pomFile).signatureFiles[0]
        artifact(pomAscFile) {
          classifier = null
          extension = 'pom.asc'
        }
      }

      artifact(sourcesJar) {
        classifier = 'sources'
      }
      artifact(javadocJar) {
        classifier = 'javadoc'
      }

      // create the signed artifacts
      project.tasks.signArchives.signatureFiles.each {
        artifact(it) {
          def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
          if (matcher.find()) {
            classifier = matcher.group(1)
          } else {
            classifier = null
          }
          extension = 'jar.asc'
        }
      }
    }
  }
}

nexusPublishing {
  serverUrl = uri("https://oss.sonatype.org/service/local/")
  snapshotRepositoryUrl = uri("https://oss.sonatype.org/content/repositories/snapshots/")
}

nexusStaging {
  username = project.properties['nexusUsername']
  password = project.properties['nexusPassword']
}

model {
  tasks.publishToNexus {
    dependsOn project.tasks.signArchives
  }
}
